#+BEGIN_SRC emacs-lisp
;; $DOOMDIR/config.org -*- lexical-binding: t; -*-

#+END_SRC

Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!

* Name

#+BEGIN_SRC emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Charles Ancheta"
      user-mail-address "cancheta@ualberta.ca")
#+END_SRC

* Themes


- Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:

 + `doom-font'
 + `doom-variable-pitch-font'
 + `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.

- They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:

#+BEGIN_SRC emacs-lisp
  ;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light) doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+END_SRC

#+RESULTS:

- There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:


#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)

(setq doom-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 16)
      doom-variable-pitch-font (font-spec :family "DroidSerif" :size 16)
      doom-big-font (font-spec :family "SauceCodePro Nerd Font Mono"  :size 24))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(after! org
  (setq org-directory "~/org/"

        org-todo-keywords
        '((sequence
           "TODO(T)"
           "CODE(c)"
           "DOCS(d)"
           "TEST(t)"
           "|"
           "DONE(D)"
           "CANCELLED(C)"
           "DEFERRED(f)"))

        org-log-done 'time
        org-hide-emphasis-markers t)
  )

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+END_SRC

#+RESULTS:
: t

* Packages

#+BEGIN_SRC emacs-lisp
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC

#+RESULTS:

* Keybindings

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-files '("~/org"))
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )


(defun linux-copy (beg end)
  (interactive "r")
  (call-process-region beg end  "xclip" nil nil nil "-selection" "c"))

(defun linux-paste ()
  (interactive)
  (if (region-active-p) (delete-region (region-beginning) (region-end)) nil)
  (call-process "xsel" nil t nil "-b"))

(define-key global-map (kbd "C-c C-g C-c") 'linux-copy)
(define-key global-map (kbd "C-c C-g C-v") 'linux-paste)

(define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
#+END_SRC

#+RESULTS:
: evil-numbers/dec-at-pt

* Me me big boy

#+BEGIN_SRC emacs-lisp
;; (doom-big-font-mode)
#+END_SRC

#+RESULTS:
: t
* Rust config

#+BEGIN_SRC emacs-lisp
(after! rustic
  (setq rustic-lsp-server 'rust-analyzer))
#+END_SRC
